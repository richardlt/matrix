// Code generated by protoc-gen-go. DO NOT EDIT.
// source: software/services.proto

/*
Package software is a generated protocol buffer package.

It is generated from these files:
	software/services.proto

It has these top-level messages:
	ConnectRequest
	ConnectResponse
	CreateRequest
	CreateResponse
	Image
	Theme
	Font
*/
package software

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/richardlt/matrix/sdk-go/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConnectRequest_Type int32

const (
	ConnectRequest_PING     ConnectRequest_Type = 0
	ConnectRequest_SOFTWARE ConnectRequest_Type = 1
	ConnectRequest_LAYER    ConnectRequest_Type = 2
	ConnectRequest_DRIVER   ConnectRequest_Type = 3
)

var ConnectRequest_Type_name = map[int32]string{
	0: "PING",
	1: "SOFTWARE",
	2: "LAYER",
	3: "DRIVER",
}
var ConnectRequest_Type_value = map[string]int32{
	"PING":     0,
	"SOFTWARE": 1,
	"LAYER":    2,
	"DRIVER":   3,
}

func (x ConnectRequest_Type) String() string {
	return proto.EnumName(ConnectRequest_Type_name, int32(x))
}
func (ConnectRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ConnectRequest_SoftwareData_Action int32

const (
	ConnectRequest_SoftwareData_REGISTER   ConnectRequest_SoftwareData_Action = 0
	ConnectRequest_SoftwareData_READY      ConnectRequest_SoftwareData_Action = 1
	ConnectRequest_SoftwareData_PRINT      ConnectRequest_SoftwareData_Action = 2
	ConnectRequest_SoftwareData_SET_CONFIG ConnectRequest_SoftwareData_Action = 3
)

var ConnectRequest_SoftwareData_Action_name = map[int32]string{
	0: "REGISTER",
	1: "READY",
	2: "PRINT",
	3: "SET_CONFIG",
}
var ConnectRequest_SoftwareData_Action_value = map[string]int32{
	"REGISTER":   0,
	"READY":      1,
	"PRINT":      2,
	"SET_CONFIG": 3,
}

func (x ConnectRequest_SoftwareData_Action) String() string {
	return proto.EnumName(ConnectRequest_SoftwareData_Action_name, int32(x))
}
func (ConnectRequest_SoftwareData_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0}
}

type ConnectRequest_LayerData_Action int32

const (
	ConnectRequest_LayerData_CLEAN          ConnectRequest_LayerData_Action = 0
	ConnectRequest_LayerData_REMOVE         ConnectRequest_LayerData_Action = 1
	ConnectRequest_LayerData_SET_WITH_COORD ConnectRequest_LayerData_Action = 2
)

var ConnectRequest_LayerData_Action_name = map[int32]string{
	0: "CLEAN",
	1: "REMOVE",
	2: "SET_WITH_COORD",
}
var ConnectRequest_LayerData_Action_value = map[string]int32{
	"CLEAN":          0,
	"REMOVE":         1,
	"SET_WITH_COORD": 2,
}

func (x ConnectRequest_LayerData_Action) String() string {
	return proto.EnumName(ConnectRequest_LayerData_Action_name, int32(x))
}
func (ConnectRequest_LayerData_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1, 0}
}

type ConnectRequest_DriverData_Action int32

const (
	ConnectRequest_DriverData_RENDER ConnectRequest_DriverData_Action = 0
)

var ConnectRequest_DriverData_Action_name = map[int32]string{
	0: "RENDER",
}
var ConnectRequest_DriverData_Action_value = map[string]int32{
	"RENDER": 0,
}

func (x ConnectRequest_DriverData_Action) String() string {
	return proto.EnumName(ConnectRequest_DriverData_Action_name, int32(x))
}
func (ConnectRequest_DriverData_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 2, 0}
}

type ConnectResponse_Type int32

const (
	ConnectResponse_PING     ConnectResponse_Type = 0
	ConnectResponse_SOFTWARE ConnectResponse_Type = 1
	ConnectResponse_DRIVER   ConnectResponse_Type = 2
)

var ConnectResponse_Type_name = map[int32]string{
	0: "PING",
	1: "SOFTWARE",
	2: "DRIVER",
}
var ConnectResponse_Type_value = map[string]int32{
	"PING":     0,
	"SOFTWARE": 1,
	"DRIVER":   2,
}

func (x ConnectResponse_Type) String() string {
	return proto.EnumName(ConnectResponse_Type_name, int32(x))
}
func (ConnectResponse_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type ConnectResponse_SoftwareData_Action int32

const (
	ConnectResponse_SoftwareData_INIT           ConnectResponse_SoftwareData_Action = 0
	ConnectResponse_SoftwareData_START          ConnectResponse_SoftwareData_Action = 1
	ConnectResponse_SoftwareData_CLOSE          ConnectResponse_SoftwareData_Action = 2
	ConnectResponse_SoftwareData_PLAYER_COMMAND ConnectResponse_SoftwareData_Action = 3
)

var ConnectResponse_SoftwareData_Action_name = map[int32]string{
	0: "INIT",
	1: "START",
	2: "CLOSE",
	3: "PLAYER_COMMAND",
}
var ConnectResponse_SoftwareData_Action_value = map[string]int32{
	"INIT":           0,
	"START":          1,
	"CLOSE":          2,
	"PLAYER_COMMAND": 3,
}

func (x ConnectResponse_SoftwareData_Action) String() string {
	return proto.EnumName(ConnectResponse_SoftwareData_Action_name, int32(x))
}
func (ConnectResponse_SoftwareData_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0, 0}
}

type ConnectResponse_DriverData_Action int32

const (
	ConnectResponse_DriverData_END  ConnectResponse_DriverData_Action = 0
	ConnectResponse_DriverData_STEP ConnectResponse_DriverData_Action = 1
)

var ConnectResponse_DriverData_Action_name = map[int32]string{
	0: "END",
	1: "STEP",
}
var ConnectResponse_DriverData_Action_value = map[string]int32{
	"END":  0,
	"STEP": 1,
}

func (x ConnectResponse_DriverData_Action) String() string {
	return proto.EnumName(ConnectResponse_DriverData_Action_name, int32(x))
}
func (ConnectResponse_DriverData_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 1, 0}
}

type CreateRequest_Type int32

const (
	CreateRequest_LAYER  CreateRequest_Type = 0
	CreateRequest_DRIVER CreateRequest_Type = 1
)

var CreateRequest_Type_name = map[int32]string{
	0: "LAYER",
	1: "DRIVER",
}
var CreateRequest_Type_value = map[string]int32{
	"LAYER":  0,
	"DRIVER": 1,
}

func (x CreateRequest_Type) String() string {
	return proto.EnumName(CreateRequest_Type_name, int32(x))
}
func (CreateRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type CreateRequest_DriverData_Type int32

const (
	CreateRequest_DriverData_RANDOM   CreateRequest_DriverData_Type = 0
	CreateRequest_DriverData_CARACTER CreateRequest_DriverData_Type = 1
	CreateRequest_DriverData_TEXT     CreateRequest_DriverData_Type = 2
)

var CreateRequest_DriverData_Type_name = map[int32]string{
	0: "RANDOM",
	1: "CARACTER",
	2: "TEXT",
}
var CreateRequest_DriverData_Type_value = map[string]int32{
	"RANDOM":   0,
	"CARACTER": 1,
	"TEXT":     2,
}

func (x CreateRequest_DriverData_Type) String() string {
	return proto.EnumName(CreateRequest_DriverData_Type_name, int32(x))
}
func (CreateRequest_DriverData_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 1, 0}
}

type CreateResponse_Type int32

const (
	CreateResponse_LAYER  CreateResponse_Type = 0
	CreateResponse_DRIVER CreateResponse_Type = 1
)

var CreateResponse_Type_name = map[int32]string{
	0: "LAYER",
	1: "DRIVER",
}
var CreateResponse_Type_value = map[string]int32{
	"LAYER":  0,
	"DRIVER": 1,
}

func (x CreateResponse_Type) String() string {
	return proto.EnumName(CreateResponse_Type_name, int32(x))
}
func (CreateResponse_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type ConnectRequest struct {
	Type         ConnectRequest_Type          `protobuf:"varint,1,opt,name=type,enum=software.ConnectRequest_Type" json:"type,omitempty"`
	SoftwareData *ConnectRequest_SoftwareData `protobuf:"bytes,2,opt,name=softwareData" json:"softwareData,omitempty"`
	LayerData    *ConnectRequest_LayerData    `protobuf:"bytes,3,opt,name=layerData" json:"layerData,omitempty"`
	DriverData   *ConnectRequest_DriverData   `protobuf:"bytes,4,opt,name=driverData" json:"driverData,omitempty"`
}

func (m *ConnectRequest) Reset()                    { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string            { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()               {}
func (*ConnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConnectRequest) GetType() ConnectRequest_Type {
	if m != nil {
		return m.Type
	}
	return ConnectRequest_PING
}

func (m *ConnectRequest) GetSoftwareData() *ConnectRequest_SoftwareData {
	if m != nil {
		return m.SoftwareData
	}
	return nil
}

func (m *ConnectRequest) GetLayerData() *ConnectRequest_LayerData {
	if m != nil {
		return m.LayerData
	}
	return nil
}

func (m *ConnectRequest) GetDriverData() *ConnectRequest_DriverData {
	if m != nil {
		return m.DriverData
	}
	return nil
}

type ConnectRequest_SoftwareData struct {
	Action ConnectRequest_SoftwareData_Action  `protobuf:"varint,1,opt,name=action,enum=software.ConnectRequest_SoftwareData_Action" json:"action,omitempty"`
	UUID   string                              `protobuf:"bytes,2,opt,name=UUID" json:"UUID,omitempty"`
	Config *ConnectRequest_SoftwareData_Config `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *ConnectRequest_SoftwareData) Reset()                    { *m = ConnectRequest_SoftwareData{} }
func (m *ConnectRequest_SoftwareData) String() string            { return proto.CompactTextString(m) }
func (*ConnectRequest_SoftwareData) ProtoMessage()               {}
func (*ConnectRequest_SoftwareData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *ConnectRequest_SoftwareData) GetAction() ConnectRequest_SoftwareData_Action {
	if m != nil {
		return m.Action
	}
	return ConnectRequest_SoftwareData_REGISTER
}

func (m *ConnectRequest_SoftwareData) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ConnectRequest_SoftwareData) GetConfig() *ConnectRequest_SoftwareData_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

type ConnectRequest_SoftwareData_Config struct {
	Logo           *Image `protobuf:"bytes,1,opt,name=logo" json:"logo,omitempty"`
	MinPlayerCount uint64 `protobuf:"varint,2,opt,name=minPlayerCount" json:"minPlayerCount,omitempty"`
	MaxPlayerCount uint64 `protobuf:"varint,3,opt,name=maxPlayerCount" json:"maxPlayerCount,omitempty"`
}

func (m *ConnectRequest_SoftwareData_Config) Reset()         { *m = ConnectRequest_SoftwareData_Config{} }
func (m *ConnectRequest_SoftwareData_Config) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest_SoftwareData_Config) ProtoMessage()    {}
func (*ConnectRequest_SoftwareData_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0}
}

func (m *ConnectRequest_SoftwareData_Config) GetLogo() *Image {
	if m != nil {
		return m.Logo
	}
	return nil
}

func (m *ConnectRequest_SoftwareData_Config) GetMinPlayerCount() uint64 {
	if m != nil {
		return m.MinPlayerCount
	}
	return 0
}

func (m *ConnectRequest_SoftwareData_Config) GetMaxPlayerCount() uint64 {
	if m != nil {
		return m.MaxPlayerCount
	}
	return 0
}

type ConnectRequest_LayerData struct {
	Action ConnectRequest_LayerData_Action `protobuf:"varint,1,opt,name=action,enum=software.ConnectRequest_LayerData_Action" json:"action,omitempty"`
	UUID   string                          `protobuf:"bytes,2,opt,name=UUID" json:"UUID,omitempty"`
	Coord  *common.Coord                   `protobuf:"bytes,3,opt,name=coord" json:"coord,omitempty"`
	Color  *common.Color                   `protobuf:"bytes,4,opt,name=color" json:"color,omitempty"`
}

func (m *ConnectRequest_LayerData) Reset()                    { *m = ConnectRequest_LayerData{} }
func (m *ConnectRequest_LayerData) String() string            { return proto.CompactTextString(m) }
func (*ConnectRequest_LayerData) ProtoMessage()               {}
func (*ConnectRequest_LayerData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *ConnectRequest_LayerData) GetAction() ConnectRequest_LayerData_Action {
	if m != nil {
		return m.Action
	}
	return ConnectRequest_LayerData_CLEAN
}

func (m *ConnectRequest_LayerData) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ConnectRequest_LayerData) GetCoord() *common.Coord {
	if m != nil {
		return m.Coord
	}
	return nil
}

func (m *ConnectRequest_LayerData) GetColor() *common.Color {
	if m != nil {
		return m.Color
	}
	return nil
}

type ConnectRequest_DriverData struct {
	Action     ConnectRequest_DriverData_Action `protobuf:"varint,1,opt,name=action,enum=software.ConnectRequest_DriverData_Action" json:"action,omitempty"`
	UUID       string                           `protobuf:"bytes,2,opt,name=UUID" json:"UUID,omitempty"`
	Caracter   string                           `protobuf:"bytes,3,opt,name=caracter" json:"caracter,omitempty"`
	Color      *common.Color                    `protobuf:"bytes,4,opt,name=color" json:"color,omitempty"`
	Background *common.Color                    `protobuf:"bytes,5,opt,name=background" json:"background,omitempty"`
	Coord      *common.Coord                    `protobuf:"bytes,6,opt,name=coord" json:"coord,omitempty"`
	Text       string                           `protobuf:"bytes,7,opt,name=text" json:"text,omitempty"`
}

func (m *ConnectRequest_DriverData) Reset()                    { *m = ConnectRequest_DriverData{} }
func (m *ConnectRequest_DriverData) String() string            { return proto.CompactTextString(m) }
func (*ConnectRequest_DriverData) ProtoMessage()               {}
func (*ConnectRequest_DriverData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

func (m *ConnectRequest_DriverData) GetAction() ConnectRequest_DriverData_Action {
	if m != nil {
		return m.Action
	}
	return ConnectRequest_DriverData_RENDER
}

func (m *ConnectRequest_DriverData) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ConnectRequest_DriverData) GetCaracter() string {
	if m != nil {
		return m.Caracter
	}
	return ""
}

func (m *ConnectRequest_DriverData) GetColor() *common.Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *ConnectRequest_DriverData) GetBackground() *common.Color {
	if m != nil {
		return m.Background
	}
	return nil
}

func (m *ConnectRequest_DriverData) GetCoord() *common.Coord {
	if m != nil {
		return m.Coord
	}
	return nil
}

func (m *ConnectRequest_DriverData) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type ConnectResponse struct {
	Type         ConnectResponse_Type          `protobuf:"varint,1,opt,name=type,enum=software.ConnectResponse_Type" json:"type,omitempty"`
	SoftwareData *ConnectResponse_SoftwareData `protobuf:"bytes,2,opt,name=softwareData" json:"softwareData,omitempty"`
	DriverData   *ConnectResponse_DriverData   `protobuf:"bytes,3,opt,name=driverData" json:"driverData,omitempty"`
}

func (m *ConnectResponse) Reset()                    { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string            { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()               {}
func (*ConnectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConnectResponse) GetType() ConnectResponse_Type {
	if m != nil {
		return m.Type
	}
	return ConnectResponse_PING
}

func (m *ConnectResponse) GetSoftwareData() *ConnectResponse_SoftwareData {
	if m != nil {
		return m.SoftwareData
	}
	return nil
}

func (m *ConnectResponse) GetDriverData() *ConnectResponse_DriverData {
	if m != nil {
		return m.DriverData
	}
	return nil
}

type ConnectResponse_SoftwareData struct {
	Action      ConnectResponse_SoftwareData_Action `protobuf:"varint,1,opt,name=action,enum=software.ConnectResponse_SoftwareData_Action" json:"action,omitempty"`
	UUID        string                              `protobuf:"bytes,2,opt,name=UUID" json:"UUID,omitempty"`
	PlayerCount uint64                              `protobuf:"varint,3,opt,name=playerCount" json:"playerCount,omitempty"`
	Slot        uint64                              `protobuf:"varint,4,opt,name=slot" json:"slot,omitempty"`
	Command     common.Command                      `protobuf:"varint,5,opt,name=command,enum=common.Command" json:"command,omitempty"`
}

func (m *ConnectResponse_SoftwareData) Reset()                    { *m = ConnectResponse_SoftwareData{} }
func (m *ConnectResponse_SoftwareData) String() string            { return proto.CompactTextString(m) }
func (*ConnectResponse_SoftwareData) ProtoMessage()               {}
func (*ConnectResponse_SoftwareData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *ConnectResponse_SoftwareData) GetAction() ConnectResponse_SoftwareData_Action {
	if m != nil {
		return m.Action
	}
	return ConnectResponse_SoftwareData_INIT
}

func (m *ConnectResponse_SoftwareData) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ConnectResponse_SoftwareData) GetPlayerCount() uint64 {
	if m != nil {
		return m.PlayerCount
	}
	return 0
}

func (m *ConnectResponse_SoftwareData) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *ConnectResponse_SoftwareData) GetCommand() common.Command {
	if m != nil {
		return m.Command
	}
	return common.Command_UP_UP
}

type ConnectResponse_DriverData struct {
	Action  ConnectResponse_DriverData_Action `protobuf:"varint,1,opt,name=action,enum=software.ConnectResponse_DriverData_Action" json:"action,omitempty"`
	UUID    string                            `protobuf:"bytes,2,opt,name=UUID" json:"UUID,omitempty"`
	Total   uint64                            `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
	Current uint64                            `protobuf:"varint,4,opt,name=current" json:"current,omitempty"`
}

func (m *ConnectResponse_DriverData) Reset()                    { *m = ConnectResponse_DriverData{} }
func (m *ConnectResponse_DriverData) String() string            { return proto.CompactTextString(m) }
func (*ConnectResponse_DriverData) ProtoMessage()               {}
func (*ConnectResponse_DriverData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *ConnectResponse_DriverData) GetAction() ConnectResponse_DriverData_Action {
	if m != nil {
		return m.Action
	}
	return ConnectResponse_DriverData_END
}

func (m *ConnectResponse_DriverData) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ConnectResponse_DriverData) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ConnectResponse_DriverData) GetCurrent() uint64 {
	if m != nil {
		return m.Current
	}
	return 0
}

type CreateRequest struct {
	Type       CreateRequest_Type        `protobuf:"varint,1,opt,name=type,enum=software.CreateRequest_Type" json:"type,omitempty"`
	LayerData  *CreateRequest_LayerData  `protobuf:"bytes,2,opt,name=layerData" json:"layerData,omitempty"`
	DriverData *CreateRequest_DriverData `protobuf:"bytes,3,opt,name=driverData" json:"driverData,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateRequest) GetType() CreateRequest_Type {
	if m != nil {
		return m.Type
	}
	return CreateRequest_LAYER
}

func (m *CreateRequest) GetLayerData() *CreateRequest_LayerData {
	if m != nil {
		return m.LayerData
	}
	return nil
}

func (m *CreateRequest) GetDriverData() *CreateRequest_DriverData {
	if m != nil {
		return m.DriverData
	}
	return nil
}

type CreateRequest_LayerData struct {
	SoftwareUUID string `protobuf:"bytes,1,opt,name=softwareUUID" json:"softwareUUID,omitempty"`
}

func (m *CreateRequest_LayerData) Reset()                    { *m = CreateRequest_LayerData{} }
func (m *CreateRequest_LayerData) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest_LayerData) ProtoMessage()               {}
func (*CreateRequest_LayerData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *CreateRequest_LayerData) GetSoftwareUUID() string {
	if m != nil {
		return m.SoftwareUUID
	}
	return ""
}

type CreateRequest_DriverData struct {
	Type         CreateRequest_DriverData_Type `protobuf:"varint,1,opt,name=type,enum=software.CreateRequest_DriverData_Type" json:"type,omitempty"`
	SoftwareUUID string                        `protobuf:"bytes,2,opt,name=softwareUUID" json:"softwareUUID,omitempty"`
	LayerUUID    string                        `protobuf:"bytes,3,opt,name=layerUUID" json:"layerUUID,omitempty"`
	Font         *Font                         `protobuf:"bytes,4,opt,name=font" json:"font,omitempty"`
}

func (m *CreateRequest_DriverData) Reset()                    { *m = CreateRequest_DriverData{} }
func (m *CreateRequest_DriverData) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest_DriverData) ProtoMessage()               {}
func (*CreateRequest_DriverData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *CreateRequest_DriverData) GetType() CreateRequest_DriverData_Type {
	if m != nil {
		return m.Type
	}
	return CreateRequest_DriverData_RANDOM
}

func (m *CreateRequest_DriverData) GetSoftwareUUID() string {
	if m != nil {
		return m.SoftwareUUID
	}
	return ""
}

func (m *CreateRequest_DriverData) GetLayerUUID() string {
	if m != nil {
		return m.LayerUUID
	}
	return ""
}

func (m *CreateRequest_DriverData) GetFont() *Font {
	if m != nil {
		return m.Font
	}
	return nil
}

type CreateResponse struct {
	Type       CreateResponse_Type        `protobuf:"varint,1,opt,name=type,enum=software.CreateResponse_Type" json:"type,omitempty"`
	LayerData  *CreateResponse_LayerData  `protobuf:"bytes,2,opt,name=layerData" json:"layerData,omitempty"`
	DriverData *CreateResponse_DriverData `protobuf:"bytes,3,opt,name=driverData" json:"driverData,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateResponse) GetType() CreateResponse_Type {
	if m != nil {
		return m.Type
	}
	return CreateResponse_LAYER
}

func (m *CreateResponse) GetLayerData() *CreateResponse_LayerData {
	if m != nil {
		return m.LayerData
	}
	return nil
}

func (m *CreateResponse) GetDriverData() *CreateResponse_DriverData {
	if m != nil {
		return m.DriverData
	}
	return nil
}

type CreateResponse_LayerData struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID" json:"UUID,omitempty"`
}

func (m *CreateResponse_LayerData) Reset()                    { *m = CreateResponse_LayerData{} }
func (m *CreateResponse_LayerData) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse_LayerData) ProtoMessage()               {}
func (*CreateResponse_LayerData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *CreateResponse_LayerData) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type CreateResponse_DriverData struct {
	UUID string `protobuf:"bytes,2,opt,name=UUID" json:"UUID,omitempty"`
}

func (m *CreateResponse_DriverData) Reset()                    { *m = CreateResponse_DriverData{} }
func (m *CreateResponse_DriverData) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse_DriverData) ProtoMessage()               {}
func (*CreateResponse_DriverData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1} }

func (m *CreateResponse_DriverData) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type Image struct {
	Name   string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Height uint64          `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Width  uint64          `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	Colors []*common.Color `protobuf:"bytes,4,rep,name=colors" json:"colors,omitempty"`
	Mask   []uint64        `protobuf:"varint,5,rep,packed,name=mask" json:"mask,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Image) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Image) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Image) GetWidth() uint64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Image) GetColors() []*common.Color {
	if m != nil {
		return m.Colors
	}
	return nil
}

func (m *Image) GetMask() []uint64 {
	if m != nil {
		return m.Mask
	}
	return nil
}

type Theme struct {
	Name   string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Colors map[string]*common.Color `protobuf:"bytes,2,rep,name=colors" json:"colors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Theme) Reset()                    { *m = Theme{} }
func (m *Theme) String() string            { return proto.CompactTextString(m) }
func (*Theme) ProtoMessage()               {}
func (*Theme) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Theme) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Theme) GetColors() map[string]*common.Color {
	if m != nil {
		return m.Colors
	}
	return nil
}

type Font struct {
	Name      string                    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Height    uint64                    `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Caracters map[string]*Font_Caracter `protobuf:"bytes,3,rep,name=caracters" json:"caracters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Font) Reset()                    { *m = Font{} }
func (m *Font) String() string            { return proto.CompactTextString(m) }
func (*Font) ProtoMessage()               {}
func (*Font) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Font) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Font) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Font) GetCaracters() map[string]*Font_Caracter {
	if m != nil {
		return m.Caracters
	}
	return nil
}

type Font_Caracter struct {
	Width uint64   `protobuf:"varint,1,opt,name=width" json:"width,omitempty"`
	Mask  []uint64 `protobuf:"varint,2,rep,packed,name=mask" json:"mask,omitempty"`
}

func (m *Font_Caracter) Reset()                    { *m = Font_Caracter{} }
func (m *Font_Caracter) String() string            { return proto.CompactTextString(m) }
func (*Font_Caracter) ProtoMessage()               {}
func (*Font_Caracter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

func (m *Font_Caracter) GetWidth() uint64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Font_Caracter) GetMask() []uint64 {
	if m != nil {
		return m.Mask
	}
	return nil
}

func init() {
	proto.RegisterType((*ConnectRequest)(nil), "software.ConnectRequest")
	proto.RegisterType((*ConnectRequest_SoftwareData)(nil), "software.ConnectRequest.SoftwareData")
	proto.RegisterType((*ConnectRequest_SoftwareData_Config)(nil), "software.ConnectRequest.SoftwareData.Config")
	proto.RegisterType((*ConnectRequest_LayerData)(nil), "software.ConnectRequest.LayerData")
	proto.RegisterType((*ConnectRequest_DriverData)(nil), "software.ConnectRequest.DriverData")
	proto.RegisterType((*ConnectResponse)(nil), "software.ConnectResponse")
	proto.RegisterType((*ConnectResponse_SoftwareData)(nil), "software.ConnectResponse.SoftwareData")
	proto.RegisterType((*ConnectResponse_DriverData)(nil), "software.ConnectResponse.DriverData")
	proto.RegisterType((*CreateRequest)(nil), "software.CreateRequest")
	proto.RegisterType((*CreateRequest_LayerData)(nil), "software.CreateRequest.LayerData")
	proto.RegisterType((*CreateRequest_DriverData)(nil), "software.CreateRequest.DriverData")
	proto.RegisterType((*CreateResponse)(nil), "software.CreateResponse")
	proto.RegisterType((*CreateResponse_LayerData)(nil), "software.CreateResponse.LayerData")
	proto.RegisterType((*CreateResponse_DriverData)(nil), "software.CreateResponse.DriverData")
	proto.RegisterType((*Image)(nil), "software.Image")
	proto.RegisterType((*Theme)(nil), "software.Theme")
	proto.RegisterType((*Font)(nil), "software.Font")
	proto.RegisterType((*Font_Caracter)(nil), "software.Font.Caracter")
	proto.RegisterEnum("software.ConnectRequest_Type", ConnectRequest_Type_name, ConnectRequest_Type_value)
	proto.RegisterEnum("software.ConnectRequest_SoftwareData_Action", ConnectRequest_SoftwareData_Action_name, ConnectRequest_SoftwareData_Action_value)
	proto.RegisterEnum("software.ConnectRequest_LayerData_Action", ConnectRequest_LayerData_Action_name, ConnectRequest_LayerData_Action_value)
	proto.RegisterEnum("software.ConnectRequest_DriverData_Action", ConnectRequest_DriverData_Action_name, ConnectRequest_DriverData_Action_value)
	proto.RegisterEnum("software.ConnectResponse_Type", ConnectResponse_Type_name, ConnectResponse_Type_value)
	proto.RegisterEnum("software.ConnectResponse_SoftwareData_Action", ConnectResponse_SoftwareData_Action_name, ConnectResponse_SoftwareData_Action_value)
	proto.RegisterEnum("software.ConnectResponse_DriverData_Action", ConnectResponse_DriverData_Action_name, ConnectResponse_DriverData_Action_value)
	proto.RegisterEnum("software.CreateRequest_Type", CreateRequest_Type_name, CreateRequest_Type_value)
	proto.RegisterEnum("software.CreateRequest_DriverData_Type", CreateRequest_DriverData_Type_name, CreateRequest_DriverData_Type_value)
	proto.RegisterEnum("software.CreateResponse_Type", CreateResponse_Type_name, CreateResponse_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Software service

type SoftwareClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Software_ConnectClient, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type softwareClient struct {
	cc *grpc.ClientConn
}

func NewSoftwareClient(cc *grpc.ClientConn) SoftwareClient {
	return &softwareClient{cc}
}

func (c *softwareClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Software_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Software_serviceDesc.Streams[0], c.cc, "/software.Software/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &softwareConnectClient{stream}
	return x, nil
}

type Software_ConnectClient interface {
	Send(*ConnectRequest) error
	Recv() (*ConnectResponse, error)
	grpc.ClientStream
}

type softwareConnectClient struct {
	grpc.ClientStream
}

func (x *softwareConnectClient) Send(m *ConnectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *softwareConnectClient) Recv() (*ConnectResponse, error) {
	m := new(ConnectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *softwareClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/software.Software/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Software service

type SoftwareServer interface {
	Connect(Software_ConnectServer) error
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
}

func RegisterSoftwareServer(s *grpc.Server, srv SoftwareServer) {
	s.RegisterService(&_Software_serviceDesc, srv)
}

func _Software_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SoftwareServer).Connect(&softwareConnectServer{stream})
}

type Software_ConnectServer interface {
	Send(*ConnectResponse) error
	Recv() (*ConnectRequest, error)
	grpc.ServerStream
}

type softwareConnectServer struct {
	grpc.ServerStream
}

func (x *softwareConnectServer) Send(m *ConnectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *softwareConnectServer) Recv() (*ConnectRequest, error) {
	m := new(ConnectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Software_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftwareServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/software.Software/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftwareServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Software_serviceDesc = grpc.ServiceDesc{
	ServiceName: "software.Software",
	HandlerType: (*SoftwareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Software_Create_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Software_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "software/services.proto",
}

func init() { proto.RegisterFile("software/services.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcf, 0x73, 0xdb, 0xc4,
	0x17, 0x8f, 0x7e, 0xd8, 0xb1, 0x5f, 0x52, 0x47, 0xb3, 0xd3, 0xf9, 0xc6, 0x5f, 0xb5, 0x01, 0xa3,
	0xd0, 0x92, 0x16, 0x62, 0x17, 0x87, 0xce, 0x30, 0x84, 0x19, 0xea, 0x48, 0x4a, 0x6a, 0x26, 0xb1,
	0x33, 0x6b, 0xa5, 0xa5, 0xa7, 0x8c, 0x22, 0x2b, 0xb6, 0x27, 0xb6, 0x36, 0x48, 0x72, 0x9a, 0x1c,
	0xb8, 0x71, 0x60, 0x86, 0xff, 0x80, 0x2b, 0x57, 0x4e, 0xfc, 0x0b, 0xf0, 0x5f, 0x70, 0xe2, 0xcc,
	0x95, 0x23, 0x07, 0x66, 0x57, 0x92, 0x25, 0x39, 0x56, 0x23, 0x6e, 0xab, 0xdd, 0xcf, 0x7b, 0xbb,
	0xef, 0xf3, 0x3e, 0xef, 0xed, 0x0a, 0xd6, 0x3d, 0x72, 0xee, 0xbf, 0x35, 0x5d, 0xbb, 0xe1, 0xd9,
	0xee, 0xd5, 0xc8, 0xb2, 0xbd, 0xfa, 0xa5, 0x4b, 0x7c, 0x82, 0x4a, 0xd1, 0x82, 0xfc, 0x7c, 0x30,
	0xf2, 0x87, 0xd3, 0xb3, 0xba, 0x45, 0x26, 0x0d, 0x77, 0x64, 0x0d, 0x4d, 0xb7, 0x3f, 0xf6, 0x1b,
	0x13, 0xd3, 0x77, 0x47, 0xd7, 0x0d, 0xaf, 0x7f, 0xb1, 0x3d, 0x20, 0x0d, 0x8b, 0x4c, 0x26, 0xc4,
	0x69, 0xf8, 0x37, 0x97, 0x91, 0x03, 0xe5, 0xf7, 0x32, 0x54, 0x54, 0xe2, 0x38, 0xb6, 0xe5, 0x63,
	0xfb, 0xdb, 0xa9, 0xed, 0xf9, 0xe8, 0x53, 0x10, 0x29, 0xa2, 0xca, 0xd5, 0xb8, 0xad, 0x4a, 0x73,
	0xa3, 0x1e, 0x6d, 0x51, 0x4f, 0xe3, 0xea, 0xc6, 0xcd, 0xa5, 0x8d, 0x19, 0x14, 0xb5, 0x61, 0x35,
	0x42, 0x69, 0xa6, 0x6f, 0x56, 0xf9, 0x1a, 0xb7, 0xb5, 0xd2, 0x7c, 0x94, 0x69, 0xda, 0x4b, 0x80,
	0x71, 0xca, 0x14, 0xbd, 0x80, 0xf2, 0xd8, 0xbc, 0xb1, 0x5d, 0xe6, 0x47, 0x60, 0x7e, 0x94, 0x4c,
	0x3f, 0x87, 0x11, 0x12, 0xc7, 0x46, 0x48, 0x05, 0xe8, 0xbb, 0xa3, 0xab, 0xd0, 0x85, 0xc8, 0x5c,
	0x6c, 0x66, 0xba, 0xd0, 0x66, 0x50, 0x9c, 0x30, 0x93, 0xff, 0xe2, 0x61, 0x35, 0x79, 0x4a, 0xa4,
	0x41, 0xd1, 0xb4, 0xfc, 0x11, 0x71, 0x42, 0x5e, 0x3e, 0xc9, 0x15, 0x5c, 0xbd, 0xc5, 0x6c, 0x70,
	0x68, 0x8b, 0x10, 0x88, 0x27, 0x27, 0x6d, 0x8d, 0x11, 0x54, 0xc6, 0x6c, 0x4c, 0x3d, 0x5b, 0xc4,
	0x39, 0x1f, 0x0d, 0xc2, 0x70, 0x73, 0x7a, 0x56, 0x99, 0x0d, 0x0e, 0x6d, 0xe5, 0xef, 0xa0, 0x18,
	0xcc, 0xa0, 0x4d, 0x10, 0xc7, 0x64, 0x40, 0xd8, 0x39, 0x57, 0x9a, 0x6b, 0xb1, 0xb7, 0xf6, 0xc4,
	0x1c, 0xd8, 0x98, 0x2d, 0xa2, 0xc7, 0x50, 0x99, 0x8c, 0x9c, 0x63, 0xc6, 0x9a, 0x4a, 0xa6, 0x8e,
	0xcf, 0x8e, 0x24, 0xe2, 0xb9, 0x59, 0x86, 0x33, 0xaf, 0x93, 0x38, 0x21, 0xc4, 0xa5, 0x66, 0x95,
	0x2f, 0xa1, 0x18, 0x84, 0x8a, 0x56, 0xa1, 0x84, 0xf5, 0x83, 0x76, 0xcf, 0xd0, 0xb1, 0xb4, 0x84,
	0xca, 0x50, 0xc0, 0x7a, 0x4b, 0x7b, 0x23, 0x71, 0x74, 0x78, 0x8c, 0xdb, 0x1d, 0x43, 0xe2, 0x51,
	0x05, 0xa0, 0xa7, 0x1b, 0xa7, 0x6a, 0xb7, 0xb3, 0xdf, 0x3e, 0x90, 0x04, 0xf9, 0x4f, 0x0e, 0xca,
	0xb3, 0x5c, 0xa2, 0xd6, 0x1c, 0xd5, 0x4f, 0xee, 0xce, 0x7f, 0x1e, 0x9e, 0x37, 0xa1, 0x60, 0x11,
	0xe2, 0xf6, 0x43, 0x9a, 0xef, 0xd5, 0x83, 0x72, 0xa8, 0xab, 0x74, 0x12, 0x07, 0x6b, 0x01, 0x68,
	0x4c, 0xdc, 0x50, 0x37, 0x09, 0xd0, 0x98, 0xb8, 0x38, 0x58, 0x53, 0x76, 0x66, 0xc1, 0x96, 0xa1,
	0xa0, 0x1e, 0xea, 0xad, 0x8e, 0xb4, 0x84, 0x00, 0x8a, 0x58, 0x3f, 0xea, 0xbe, 0xd2, 0x25, 0x0e,
	0x21, 0xa8, 0xd0, 0xf8, 0x5e, 0xb7, 0x8d, 0x97, 0xa7, 0x6a, 0xb7, 0x8b, 0x35, 0x89, 0x97, 0x7f,
	0xe6, 0x01, 0x62, 0xb1, 0xa1, 0xbd, 0xb9, 0x20, 0x9f, 0xe6, 0x50, 0x68, 0x9e, 0x28, 0x65, 0x28,
	0x59, 0xa6, 0x6b, 0x5a, 0xbe, 0xed, 0xb2, 0x40, 0xcb, 0x78, 0xf6, 0x9d, 0x2b, 0x38, 0xb4, 0x0d,
	0x70, 0x66, 0x5a, 0x17, 0x03, 0x97, 0x4c, 0x9d, 0x7e, 0xb5, 0xb0, 0x08, 0x99, 0x00, 0xc4, 0xac,
	0x16, 0xdf, 0xc1, 0x2a, 0x02, 0xd1, 0xb7, 0xaf, 0xfd, 0xea, 0x72, 0x70, 0x50, 0x3a, 0x56, 0xee,
	0xcf, 0x48, 0x64, 0xcc, 0x75, 0x34, 0xaa, 0x17, 0xe5, 0x39, 0x88, 0xb4, 0xaf, 0xa0, 0x12, 0x88,
	0xc7, 0xed, 0xce, 0x81, 0xb4, 0x44, 0xf5, 0xd4, 0xeb, 0xee, 0x1b, 0xaf, 0x5b, 0x58, 0x0f, 0x44,
	0x74, 0xd8, 0x7a, 0xa3, 0x63, 0x89, 0xa7, 0x66, 0x1a, 0x6e, 0xbf, 0xd2, 0xb1, 0x24, 0x28, 0xbf,
	0x15, 0x60, 0x6d, 0x46, 0x9b, 0x77, 0x49, 0x1c, 0xcf, 0x46, 0xcd, 0x54, 0x1f, 0x7b, 0x6f, 0x01,
	0xbf, 0x01, 0x30, 0xd9, 0xc8, 0xbe, 0x5e, 0xd8, 0xc8, 0x1e, 0x67, 0xdb, 0xbe, 0xa3, 0x93, 0x69,
	0xa9, 0x3e, 0x14, 0x88, 0xee, 0xc3, 0x6c, 0x4f, 0x19, 0x8d, 0xe8, 0x87, 0xf9, 0x46, 0xa4, 0xcf,
	0x09, 0x67, 0x3b, 0xdf, 0xe1, 0xf2, 0x68, 0xa7, 0x06, 0x2b, 0x97, 0xb7, 0x2a, 0x3d, 0x39, 0x45,
	0xad, 0xbc, 0x31, 0xf1, 0x99, 0x80, 0x44, 0xcc, 0xc6, 0xe8, 0x09, 0x2c, 0xd3, 0x9c, 0x9b, 0xa1,
	0x5a, 0x2a, 0xcd, 0xb5, 0x58, 0x03, 0x6c, 0x1a, 0x47, 0xeb, 0x89, 0x2e, 0x51, 0x02, 0xb1, 0xdd,
	0x69, 0x1b, 0x41, 0x87, 0xe8, 0x19, 0x2d, 0x6c, 0x04, 0xc9, 0x55, 0x0f, 0xbb, 0x3d, 0x5d, 0xe2,
	0x69, 0x05, 0x1d, 0xb3, 0x44, 0x9f, 0xaa, 0xdd, 0xa3, 0xa3, 0x56, 0x47, 0x93, 0x04, 0xf9, 0x57,
	0x2e, 0x55, 0x41, 0xea, 0x1c, 0x11, 0x1f, 0xe7, 0xe1, 0x36, 0x0f, 0x0d, 0xf7, 0xa1, 0xe0, 0x13,
	0xdf, 0x1c, 0x87, 0x04, 0x04, 0x1f, 0xa8, 0x0a, 0xcb, 0xd6, 0xd4, 0x75, 0x6d, 0x27, 0x8a, 0x3e,
	0xfa, 0x54, 0x1e, 0xcc, 0xa2, 0x5a, 0x06, 0x41, 0xef, 0x68, 0xd2, 0x12, 0x0d, 0xaf, 0x67, 0xe8,
	0xc7, 0x12, 0xa7, 0x3c, 0xbd, 0x43, 0xd0, 0xb1, 0x8a, 0x79, 0xe5, 0x6f, 0x01, 0xee, 0xa9, 0xae,
	0x6d, 0xfa, 0x76, 0x74, 0x17, 0x3f, 0x4b, 0x69, 0xf8, 0x61, 0x22, 0xc2, 0x24, 0x2c, 0xa9, 0xe0,
	0xaf, 0x92, 0xf7, 0x67, 0x20, 0xdf, 0x0f, 0xb2, 0xcc, 0x16, 0x5e, 0x9f, 0x7b, 0x0b, 0x64, 0xab,
	0x64, 0x79, 0xc8, 0x10, 0x6d, 0x23, 0xd9, 0xce, 0x95, 0xb8, 0xa6, 0x18, 0xd5, 0x1c, 0xa3, 0x3a,
	0x35, 0x27, 0xff, 0x91, 0x4e, 0xed, 0x6e, 0x2a, 0xec, 0x8f, 0xee, 0xde, 0x3d, 0xc9, 0xc0, 0xfc,
	0x7e, 0xfc, 0xed, 0xfd, 0xd0, 0xc3, 0x90, 0x25, 0x06, 0x08, 0xda, 0x64, 0x3c, 0x81, 0x14, 0x10,
	0xcf, 0x49, 0x98, 0xe7, 0x95, 0x66, 0x25, 0xde, 0x7e, 0x9f, 0x38, 0x3e, 0x66, 0x6b, 0xb3, 0xbc,
	0xd2, 0xe6, 0xd5, 0xea, 0x68, 0xdd, 0xa3, 0x20, 0xb3, 0x6a, 0x0b, 0xb7, 0x54, 0x7a, 0xf5, 0x71,
	0x34, 0xe3, 0x86, 0xfe, 0x8d, 0x21, 0xf1, 0xca, 0x46, 0x88, 0x9d, 0x35, 0xaf, 0xa5, 0x44, 0xda,
	0x39, 0xe5, 0x17, 0x1e, 0x2a, 0x51, 0x60, 0x61, 0xef, 0xca, 0x7e, 0x83, 0xa5, 0x70, 0xc9, 0xb0,
	0x5f, 0xdc, 0x4e, 0xbc, 0x92, 0x69, 0x97, 0xe3, 0xe1, 0x24, 0xdc, 0x7a, 0x38, 0xa5, 0x5d, 0x64,
	0xa4, 0xfe, 0xfd, 0x64, 0xea, 0xa3, 0xea, 0xe2, 0xe2, 0xea, 0x92, 0x6b, 0xa9, 0x4c, 0x2f, 0xa8,
	0xbf, 0xbb, 0xe8, 0xfa, 0x9e, 0x83, 0x02, 0x7b, 0xca, 0x50, 0x63, 0xc7, 0x9c, 0xd8, 0x91, 0x7b,
	0x3a, 0x46, 0xff, 0x83, 0xe2, 0xd0, 0x1e, 0x0d, 0x86, 0xd1, 0x83, 0x26, 0xfc, 0xa2, 0x45, 0xfd,
	0x76, 0xd4, 0xf7, 0x87, 0x51, 0x51, 0xb3, 0x0f, 0xf4, 0x88, 0xbe, 0xbd, 0xc6, 0xc4, 0xf5, 0xaa,
	0x62, 0x4d, 0xb8, 0x7d, 0xd1, 0x85, 0x8b, 0x74, 0xa3, 0x89, 0xe9, 0x5d, 0x54, 0x0b, 0x35, 0x81,
	0xb6, 0x3d, 0x3a, 0x56, 0x7e, 0xe2, 0xa0, 0x60, 0x0c, 0xed, 0xc9, 0xe2, 0x63, 0xec, 0xcc, 0x1c,
	0xf3, 0xcc, 0xf1, 0x83, 0x98, 0x47, 0x66, 0x14, 0x6c, 0xe0, 0xe9, 0x8e, 0xef, 0xde, 0x44, 0xdb,
	0xc8, 0x2f, 0x61, 0x25, 0x31, 0x8d, 0x24, 0x10, 0x2e, 0xec, 0x9b, 0xd0, 0x2d, 0x1d, 0xd2, 0xcb,
	0xf6, 0xca, 0x1c, 0x4f, 0xed, 0x30, 0xbf, 0xf3, 0x17, 0x38, 0x5b, 0xfb, 0x82, 0xff, 0x9c, 0x53,
	0xfe, 0xe1, 0x40, 0xa4, 0x62, 0xfd, 0x4f, 0x14, 0xed, 0x42, 0x39, 0x7a, 0x2a, 0x78, 0x55, 0x81,
	0x1d, 0x7b, 0x23, 0xad, 0xfd, 0xba, 0x1a, 0xad, 0x07, 0x07, 0x8f, 0xf1, 0xf2, 0x67, 0x50, 0x8a,
	0x16, 0x63, 0xae, 0xb9, 0x24, 0xd7, 0x11, 0x89, 0x7c, 0x4c, 0xa2, 0x7c, 0x02, 0x95, 0xb4, 0xcb,
	0x05, 0x41, 0x6f, 0xa7, 0x83, 0x5e, 0xcf, 0x38, 0x52, 0x22, 0xfc, 0xe6, 0x8f, 0x1c, 0x94, 0xa2,
	0xcb, 0x0f, 0xed, 0xc1, 0x72, 0x78, 0x1f, 0xa0, 0x6a, 0xd6, 0x23, 0x4b, 0xfe, 0x7f, 0xe6, 0xe5,
	0xb1, 0xc5, 0x3d, 0xe3, 0xd0, 0x2e, 0x14, 0x03, 0xf9, 0xa3, 0xf5, 0x8c, 0x66, 0x24, 0x57, 0xb3,
	0x2a, 0xe5, 0xac, 0xc8, 0x7e, 0xb5, 0x76, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x85, 0xf9, 0xb8,
	0xe6, 0xc6, 0x0d, 0x00, 0x00,
}
